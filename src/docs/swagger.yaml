basePath: /api
definitions:
  requests.CreateMovieRequest:
    properties:
      country:
        example: USA
        type: string
      director:
        example: Director Name
        type: string
      duration:
        example: 148
        type: integer
      genre:
        example: Genre
        type: string
      language:
        example: English
        type: string
      plot:
        example: Plot description goes here.
        type: string
      rating:
        example: 8.8
        type: number
      release_year:
        example: 2010
        type: integer
      title:
        example: Title of the Movie
        type: string
    required:
    - country
    - director
    - duration
    - genre
    - language
    - plot
    - release_year
    - title
    type: object
  requests.LoginRequest:
    properties:
      password:
        example: secret
        type: string
      username:
        example: username
        type: string
    required:
    - password
    - username
    type: object
  requests.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: secret
        minLength: 6
        type: string
      username:
        example: username
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  requests.UpdateMovieRequest:
    properties:
      country:
        example: USA
        type: string
      director:
        example: Director Name
        type: string
      duration:
        example: 148
        type: integer
      genre:
        example: Genre
        type: string
      language:
        example: English
        type: string
      plot:
        example: Plot description goes here.
        type: string
      rating:
        example: 8.8
        type: number
      release_year:
        example: 2010
        type: integer
      title:
        example: Title of the Movie
        type: string
    type: object
  responses.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  responses.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/responses.UserResponse'
    type: object
  responses.MovieResponse:
    properties:
      country:
        example: USA
        type: string
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      director:
        example: Director Name
        type: string
      duration:
        example: 148
        type: integer
      genre:
        example: Sci-Fi
        type: string
      id:
        example: 1
        type: integer
      language:
        example: English
        type: string
      plot:
        example: Plot description goes here.
        type: string
      rating:
        example: 8.8
        type: number
      release_year:
        example: 2010
        type: integer
      title:
        example: Title of the Movie
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  responses.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  responses.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample server for movies.
  title: Movie API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with username and password
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/requests.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Login a user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with username, email and password
      parameters:
      - description: Register user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /movies:
    get:
      consumes:
      - application/json
      description: Get a list of all movies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.MovieResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all movies
      tags:
      - movies
    post:
      consumes:
      - application/json
      description: Create a new movie with the input payload
      parameters:
      - description: Create movie
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/requests.CreateMovieRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.MovieResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new movie
      tags:
      - movies
  /movies/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a movie by its ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a movie
      tags:
      - movies
    get:
      consumes:
      - application/json
      description: Get a movie by its ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.MovieResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a movie by ID
      tags:
      - movies
    put:
      consumes:
      - application/json
      description: Update a movie by its ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update movie
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateMovieRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.MovieResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a movie
      tags:
      - movies
securityDefinitions:
  BearerAuth:
    description: '"Type: Bearer <JWT token>"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
